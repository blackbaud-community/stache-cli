#!/usr/bin/env node

/**
* This allows the same "stache" command to be run globally or locally.
* Tasks that should be handled globally can be added to the tasks array.
**/

'use strict';
var args,
    base,
    cli,
    command,
    cwd,
    fs,
    path,
    shell;

// Determine whether our base is cli or cwd
function getBase(args, cli, cwd) {
    var isCLI = false,
        tasks = [
            'cliversion',
            'commitBuild',
            'deploy',
            'new'
        ];
    if (args && args.length > 2) {
        tasks.forEach(function (task) {
            if (task === process.argv[2]) {
                isCLI = true;
            }
        });
    }
    return isCLI ? cli : cwd;
}

// Build the shell command we're going to run
function getRun(args, base, cli, cwd) {
    var commands = [],
        flags = [
            '--cli=' + cli,
            '--cwd=' + cwd,
            '--gruntfile=' + base + 'gruntfile.js',
            '--base=' + base
        ];

    // Split command line options into grunt commands vs flags, ignores first two as they're node paths
    args.slice(2).forEach(function(item) {
        if (item.indexOf('--') === 0) {
            flags.push(item);
        } else {
            commands.push(item);
        }
    });

    // Color or no color, that is the question
    if (flags.indexOf('--no-color') === -1) {
      flags.push('--color');
    }

    return [
        'grunt',
        commands.join(':'),
        flags.join(' ')
    ].join(' ');
}

fs = require('fs');
path = require('path');
shell = require('child_process').exec;
args = process.argv;
cli = path.normalize(__dirname + '/../');
cwd = path.normalize(process.cwd() + '/');
base = getBase(args, cli, cwd);

// Execute shell command
command = shell(getRun(args, base, cli, cwd), {
    cwd : cwd,
    maxBuffer: 1048576
});

// Listen to normal output
command.stdout.on('data', function(d) {
    process.stdout.write(d);
});

// Listen to error output
command.stderr.on('data', function(d) {
    process.stderr.write(d);
});

// Listen for fatal error
command.on('error', function(e) {
    console.log(e);
});
